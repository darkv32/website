{
  "posts": [
    {
      "id": "1",
      "slug": "cs2103-individual-project",
      "title": "CS2103 Individual Project",
      "excerpt": "Quick page to find Github Page for CS2103 individual project segment.",
      "content": "Quick page to find Github Page for `CS2103` individual project segment, [here](https://darkvoid32.github.io/ip/).",
      "featuredImage": "https://images.pexels.com/photos/1181671/pexels-photo-1181671.jpeg",
      "publishedAt": "2024-02-17",
      "updatedAt": "2024-02-17",
      "category": "academic",
      "tags": ["CS2103", "University", "Project"],
      "readTime": 1,
      "views": 150,
      "featured": false,
      "status": "published",
      "seo": {
        "metaTitle": "CS2103 Individual Project - Tang Yetong",
        "metaDescription": "Quick reference to find the Github Page for CS2103 individual project segment.",
        "keywords": ["CS2103", "NUS", "Computer Science", "Individual Project"]
      }
    },
    {
      "id": "2",
      "slug": "react-native-ble-createclient-error",
      "title": "Render Error: Cannot read property 'createClient' of null",
      "excerpt": "Faced some issues tinkering with React Native's BLE library and trying to get it to work.",
      "content": "Faced some issues tinkering with React Native's BLE library and trying to get it to work. Was following this [repo](https://github.com/friyiajr/BLESampleExpo) and was faced with `Render Error: Cannot read property 'createClient' of null` while trying to load the app on Expo Go.\n\nThe app seems to be crashing on the line: `new BleManager()`, but loading the app on emulator works fine and crashes on Expo Go. Weird!\n\n## Development Server\n\n1) After playing around I finally got `BleManager()` to stop crashing after setting up the project to use a development build by running \n\n```bash\nexpo prebuild\n```\n\n2) Create a development build like so:\n\n```bash\nnpx eas build --profile development\n```\n\n3) Scan the QR, install the app on your phone and open it. Then you will need to run the dev server for your development build:\n\n```bash\nyarn start --dev-client\n```\n\nThe server should appear on the development build on your phone and then you can run your mobile app.",
      "featuredImage": "https://images.pexels.com/photos/4050302/pexels-photo-4050302.jpeg",
      "publishedAt": "2023-11-05",
      "updatedAt": "2023-11-05",
      "category": "mobile",
      "tags": ["React Native", "BLE", "Expo", "Debugging"],
      "readTime": 3,
      "views": 420,
      "featured": false,
      "status": "published",
      "seo": {
        "metaTitle": "Fix React Native BLE createClient Error - Tang Yetong",
        "metaDescription": "Solution for React Native BLE library createClient null error when using Expo Go.",
        "keywords": ["React Native", "BLE", "Expo", "Debugging", "Mobile Development"]
      }
    },
    {
      "id": "3",
      "slug": "how-to-contribute-padawan-wallet",
      "title": "How to contribute to Padawan Wallet",
      "excerpt": "A quick summary of what the Padawan Wallet is, why it exists and how you can contribute to it!",
      "content": "A quick summary of what the [`Padawan Wallet`](https://github.com/thunderbiscuit/padawan-wallet) is, why it exists and how you can contribute to it!\n\n## `Padawan Wallet`\n\nThe `Padawan Wallet` project started as a passion project by [@thunderbiscuit](https://github.com/thunderbiscuit) to play around with the newly created `BDK-Kotlin` library.\nHe envisioned a small android app that users can use to learn about bitcoin wallets.\nUsers will download the wallet, go through its tutorials and delete the app with full confidence that they can navigate other bitcoin wallets on the market. \n\nWith the power of android, `BDK-Kotlin` and the bitcoin testnet network he created the first version of the `Padawan Wallet` as an open-source project.\nAfter `Summer of Bitcoin` came around thunderbiscuit signed up as a mentor and brought in students to not only learn about bitcoin but to contribute to the project. \n\nThe reason why this blog post exists is also because I worked on the project as part of my `Summer of Bitcoin` internship too. \nI brought the project from using fragments to Jetpack compose alongside the help many designers.\n\n## How to contribute\n\nAs of writing this post the current `Padawan Wallet` project is undergoing a major shift to using the `Summer of bitcoin`\nIf you do want to help out or just check out the project codebase feel free to join the [discord server](https://discord.com/invite/hbMszDMP3X) where we all are!\nYou can drop thunderbiscuit or me and message on any questions you have about the codebase and we will be more than happy to reply.\n\nThe project uses Jetpack Compose to create the UI, and you can take a look at the design wireframe on our discord.\nThere are many open issues on the github, most of which are outdated and will be cleared once the project is moved to the Compose framework.\n\nOf course, you can also use the project as inspiration on how to use the `BDK-Kotlin` library. \nThe library is written in Rust, so do take a look if you are interested, it is also an open-source project!\n\nLastly, I just want to thank thunderbiscuit for teaching me about the bitcoin network and how to navigate the project codebase throughout the 3 months.",
      "featuredImage": "https://images.pexels.com/photos/8369648/pexels-photo-8369648.jpeg",
      "publishedAt": "2022-08-30",
      "updatedAt": "2022-08-30",
      "category": "blockchain",
      "tags": ["Bitcoin", "Open Source", "BDK-Kotlin", "Android"],
      "readTime": 5,
      "views": 850,
      "featured": true,
      "status": "published",
      "seo": {
        "metaTitle": "How to Contribute to Padawan Wallet - Bitcoin Development",
        "metaDescription": "Learn how to contribute to the Padawan Wallet project and get involved in Bitcoin development with BDK-Kotlin.",
        "keywords": ["Bitcoin", "Padawan Wallet", "BDK-Kotlin", "Open Source", "Blockchain"]
      }
    },
    {
      "id": "4",
      "slug": "summer-of-bitcoin-2022",
      "title": "Summer of Bitcoin 2022",
      "excerpt": "This is the last week of the Summer of Bitcoin (SoB) 2022 internship and what a journey it has been.",
      "content": "This is the last week of the Summer of Bitcoin (SoB) 2022 internship and what a journey it has been.\nWhen I was job hunting after being released from serving National Service in Singapore, I never thought that I would be taking on one that focused on Bitcoin.\nMost of my friends and peers had negative impressions of Bitcoin and crypto in general, and I don't blame them, with all the shady business going on.\nPersonally though, I am neither for nor against Bitcoin.\nI feel that in time bitcoin will fill out its niche, regardless whether its taking over the finance industry or not. \n\nI applied to numerous software engineer intern positions, though I never found SoB through my job hunting.\nIt was only after one of my friends sent me the link to SoB semi-jokingly and I thought it was pretty interesting. \nA fully remote intern position where I can do basically whatever I want? \nI thought this once a nice opportunity to learn something completely new to me, and to earn a nice chunk of change for myself too, so I signed up and got in almost immediately.\n\n## Padawan Wallet\nIn the SoB internship you were either a developer or a designer, and every intern will have to pick a project and get the respective mentor to choose them over every other intern vying for that project.\nIt is a simple system, whoever catches the mentor's eyes the most will get the opportunity to work for them, and it encourages the interns to put in effort.\nSince my programming background is mostly focused on Android, with web development being on the weak side and no knowledge on other up and coming languages like Rust, I went about to try and find some Android / Java projects to work on.\nLuckily for me there just so happens to be 1 project that fits the bill, `Padawan Wallet`\n\nThe `Padawan Wallet` project started as a passion project by [@thunderbiscuit](https://github.com/thunderbiscuit) to play around with the newly created `BDK-Kotlin` library.\nHe envisioned a small android app that users can use to learn about bitcoin wallets.\nUsers will download the wallet, go through its tutorials and delete the app with full confidence that they can navigate other bitcoin wallets on the market. \n\nWith the power of android, `BDK-Kotlin` and the bitcoin testnet network he created the first version of the `Padawan Wallet` as an open-source project.\nAfter `Summer of Bitcoin` came around thunderbiscuit signed up as a mentor and brought in students to not only learn about bitcoin but to contribute to the project. \n\nThe reason why this blog post exists is also because I worked on the project as part of my `Summer of Bitcoin` internship too. \nI brought the project from using fragments to Jetpack compose alongside the help many designers.\n\n## How to contribute\n\nAs of writing this post the current `Padawan Wallet` project is undergoing a major shift to using the `Summer of bitcoin`\nIf you do want to help out or just check out the project codebase feel free to join the [discord server](https://discord.com/invite/hbMszDMP3X) where we all are!\nYou can drop thunderbiscuit or me and message on any questions you have about the codebase and we will be more than happy to reply.\n\nThe project uses Jetpack Compose to create the UI, and you can take a look at the design wireframe on our discord.\nThere are many open issues on the github, most of which are outdated and will be cleared once the project is moved to the Compose framework.\n\nOf course, you can also use the project as inspiration on how to use the `BDK-Kotlin` library. \nThe library is written in Rust, so do take a look if you are interested, it is also an open-source project!\n\nLastly, I just want to thank thunderbiscuit for teaching me about the bitcoin network and how to navigate the project codebase throughout the 3 months.",
      "featuredImage": "https://images.pexels.com/photos/8369648/pexels-photo-8369648.jpeg",
      "publishedAt": "2022-08-17",
      "updatedAt": "2022-08-17",
      "category": "blockchain",
      "tags": ["SoB", "Internship", "Bitcoin", "Padawan Wallet"],
      "readTime": 8,
      "views": 1200,
      "featured": true,
      "status": "published",
      "seo": {
        "metaTitle": "Summer of Bitcoin 2022 Experience - Tang Yetong",
        "metaDescription": "My complete experience during the Summer of Bitcoin 2022 internship, working on Padawan Wallet and learning about Bitcoin development.",
        "keywords": ["Summer of Bitcoin", "Bitcoin", "Internship", "Blockchain", "Padawan Wallet"]
      }
    },
    {
      "id": "5",
      "slug": "govtech-internship-2022-summer",
      "title": "Everything about my Internship at GovTech 2022 Summer",
      "excerpt": "Everything about my 3 month internship at GovTech 2022 May - July.",
      "content": "Everything about my 3 month internship at GovTech 2022 May - July.\n\n## Before\n\nI applied to many places hoping that maybe I could score an internship (all the generic good places) with my limited experience in the industry. \nMost of my experience comes from working as a contract SWE at [RFCom Technologies](https://www.rfcom-tech.com/). \nOther than that I worked at [Travel Prologue](https://travelprologue.com/) as an intern.\nI could get all these experiences from connections and they were a big hep in filling out my resume trying to find other jobs.\n\nThe person that hired me from Travel Prologue tried to contact me to come back and work for them again but I had changed my number during national service and I didn't know.\nIt was only long after that fact that I heard the news, so oops, my bad.\n\nThere were a few technical coding rounds that I tried and GovTech was the only one that responded back. \nSeeing that I was already a month or two into the job hunt I decided it was a decent place to intern at, and continued further down the interview path.\nI actually had 1 more coding round from a finance company that I decided not to do, since I had to re-learn C++ to do it.\n\nThe interview was really simple except that fact that I forgot everything about databases, which they asked a few questions about. \nWith that I got hired as an intern at GovTech for the _Personalise_ team for my summer before university starts.\n\n## Start\n\nRight when my internship started at GovTech some of the Covid restrictions got lifted, so more people could go to the work place.\nI got pretty worried since I was juggling some other stuff (SoB) and going to the workplace means adding 2 hours of travel time to my weekdays. \nThat would have been disastrous and I probably would have had to drop my other commitments.\nLuckily for me GovTech still mostly practices work from home and I got let off the hook. \nLucky.\n\nA few days before I was supposed to report to work my \"_Reporting Officer_\" (RO) gave me the information on everything I had to install and do, which was pretty good.\nThe RO was one of the SWEs in the team and not the tech lead, so to be honest I was less stressed asking about small stuff. \nI went to take the company's macbook which was also my first time at the Sandcrawler building that DCube was in.\nThe place is really close to the mrt and the building itself is pretty cool, though not having a staff pass meant that you had to deal with security everytime you were waiting for someone to let you in.\n\nI got introduced to everyone on the team, which included 4 SWEs, 1 data engineer, 1 designer and 1 person that dealt with the clients (I forgot the title).\nThe project itself is pretty huge actually, tons of submodules in the backend and a react frontend website was what I was introduced to. \nThere are actually other components in the project but those were mostly for the AI and its implementation, which I was not really brought in to help with.\n\nEveryone was a full-stack SWE which is a classic. \nI was given some very basic tasks as a start to get myself familiarized with the codebase, one of which was to change the website banner to the current year.\nIt didn't cross my mind to make the banner the _current year_, since the task told me to change it to _2022_. \nSo I went ahead and pushed a very short 2 liner which still somehow had some peer review changes requested on it. \nAfter some time when the tech lead looked at the task he said just change the banner to the _current year_ and it clicked in my head that I messed up.\nI wasn't thinking ahead and pushed stuff out without thinking through them, which I though was really bad, even though the consequences was pretty trivial.\n\n## Middle\n\nAfter getting used to the coding environment and all the schedules it was honestly pretty smooth sailing from there. The only problem I encountered was trying to find out which API I had to use and how to use it. Since the team is pretty small the amount of tech debt it had existing inside the code base is to be expected. The lack of documentation is also not a surprise so your choices really are to either memorize which piece of code is where, dig around until you find it, or to ask someone who does. \n\nThis is around the time where I took on the task to handle data for the new Key Results (KR) that the team needed. Metrics such as the number of people who used a certain feature etc. needed to be recorded down so that we can keep track of it more closely. There were other issues such as the data collected being filled with actions that the developers had done. In the task I had to track several new metrics and clean up the dirty data, finally uploading all of them onto AWS CloudWatch.",
      "featuredImage": "https://images.pexels.com/photos/11035380/pexels-photo-11035380.jpeg",
      "publishedAt": "2022-08-02",
      "updatedAt": "2022-08-02",
      "category": "career",
      "tags": ["GovTech", "Internship", "AWS", "CloudWatch", "React"],
      "readTime": 10,
      "views": 950,
      "featured": true,
      "status": "published",
      "seo": {
        "metaTitle": "GovTech Singapore Internship Experience 2022 - Tang Yetong",
        "metaDescription": "Complete breakdown of my 3-month software engineering internship at GovTech Singapore, including AWS CloudWatch work.",
        "keywords": ["GovTech", "Singapore", "Internship", "AWS", "CloudWatch", "Government Technology"]
      }
    },
    {
      "id": "6",
      "slug": "bumping-rbf-transaction-fees-bdk-kotlin",
      "title": "Bumping RBF Enabled Transaction Fees using BDK-Kotlin",
      "excerpt": "A quick guide on how to use the BDK-Kotlin 0.8.0 library to bump Replace-By-Fee(RBF) enabled transaction fees.",
      "content": "A quick guide on how to use the [`BDK-Kotlin 0.8.0`](https://github.com/bitcoindevkit/bdk-kotlin) library to bump Replace-By-Fee(RBF) enabled transaction fees. \nYou can use the [`Padawan Wallet`](https://github.com/thunderbiscuit/padawan-wallet) and [`dev-kit`](https://github.com/thunderbiscuit/devkit-wallet/tree/simple-wallet) open-source projects as reference. \n\n## TxBuilder\n\nWith the `TxBuilder()` you can create the transaciton as per usual. \n\n```kotlin\nvar txBuilder = recipientList.fold(TxBuilder()) { builder, recipient ->\n    builder.addRecipient(recipient.address, recipient.amount)\n}\ntxBuilder = txBuilder.enableRbf()\ntxBuilder = txBuilder.feeRate(satPerVbyte = feeRate)\nreturn txBuilder.finish(wallet)\n```\n\nAs you can see we are just adding the recipient address and amount normally, while adding a `.enableRBF()` method. \nCreating the new transaction to replace that one will be covered in a different blog post since that is a whole separate issue with tons of UI etc.",
      "featuredImage": "https://images.pexels.com/photos/8369648/pexels-photo-8369648.jpeg",
      "publishedAt": "2022-07-22",
      "updatedAt": "2022-07-22",
      "category": "blockchain",
      "tags": ["BDK-Kotlin", "Bitcoin", "RBF", "Tutorial"],
      "readTime": 4,
      "views": 320,
      "featured": false,
      "status": "published",
      "seo": {
        "metaTitle": "Bumping RBF Transaction Fees with BDK-Kotlin - Tang Yetong",
        "metaDescription": "Learn how to bump Replace-By-Fee enabled transaction fees using the BDK-Kotlin library.",
        "keywords": ["BDK-Kotlin", "Bitcoin", "RBF", "Replace-By-Fee", "Blockchain"]
      }
    },
    {
      "id": "7",
      "slug": "enabling-rbf-transactions-bdk-kotlin",
      "title": "Enabling transactions to use Replace-By-Fee using BDK-Kotlin",
      "excerpt": "A quick guide on how to use the BDK-Kotlin 0.7.0 library to send transactions with the Replace-By-Fee(RBF) feature enabled.",
      "content": "A quick guide on how to use the [`BDK-Kotlin 0.7.0`](https://github.com/bitcoindevkit/bdk-kotlin) library to send transactions with the Replace-By-Fee(RBF) feature enabled. \nYou can use the [`Padawan Wallet`](https://github.com/thunderbiscuit/padawan-wallet) and [`dev-kit`](https://github.com/thunderbiscuit/devkit-wallet/tree/simple-wallet) open-source projects as reference. \n\n## TxBuilder\n\nWith the `TxBuilder()` you can create the transaciton as per usual. \n\n```kotlin\nvar txBuilder = recipientList.fold(TxBuilder()) { builder, recipient ->\n    builder.addRecipient(recipient.address, recipient.amount)\n}\ntxBuilder = txBuilder.enableRbf()\ntxBuilder = txBuilder.feeRate(satPerVbyte = feeRate)\nreturn txBuilder.finish(wallet)\n```\n\nAs you can see we are just adding the recipient address and amount normally, while adding a `.enableRBF()` method. \nCreating the new transaction to replace that one will be covered in a different blog post since that is a whole separate issue with tons of UI etc.",
      "featuredImage": "https://images.pexels.com/photos/8369648/pexels-photo-8369648.jpeg",
      "publishedAt": "2022-07-09",
      "updatedAt": "2022-07-09",
      "category": "blockchain",
      "tags": ["BDK-Kotlin", "Bitcoin", "RBF", "Transactions"],
      "readTime": 3,
      "views": 280,
      "featured": false,
      "status": "published",
      "seo": {
        "metaTitle": "Enable Replace-By-Fee with BDK-Kotlin - Tang Yetong",
        "metaDescription": "Tutorial on enabling Replace-By-Fee feature for Bitcoin transactions using BDK-Kotlin library.",
        "keywords": ["BDK-Kotlin", "Bitcoin", "RBF", "Replace-By-Fee", "Transactions"]
      }
    },
    {
      "id": "8",
      "slug": "custom-electrum-servers-bdk-kotlin",
      "title": "Custom electrum servers with the BDK-Kotlin wallet",
      "excerpt": "A quick guide on how the user can change the wallet's electrum servers.",
      "content": "A quick guide on how the user can change the wallet's electrum servers.\n\n## Why\n\nLets say, for example, you have promised your wallet users absolute anonymity when using it. \nNobody should be able to come close to figuring out what you or your users are doing on the blockchain.\nPerhaps you heard from a friend that the public blockchain indexing services are collecting the data of people who used it.\n\nAlthough that is *highly* unlikely, the possibility that a public electrum server *can* conduct malicious activities might not sit well with everyone. \nTo give an idea of what they *can* do :\n * Lie to you and tell you you have coins that you don't\n * Refuse to relay your spending transactions\n\nIt can't however :\n * Give you a fake receive address\n * Steal your wallet private keys\n\nElectrum shares your wallet addresses with the server you are connected to so the server sees all your transactions. \n\nIf you have your own electrum server set up, or just simply want to switch to different electrum addresses on the fly, it is trivially easy to accomplish using the [`BDK-Kotlin`](https://github.com/bitcoindevkit/bdk-kotlin) library.\n\n## How\n\nAll you have to do is create a new `BlockchainConfig` object with the new electrum server URL, create the new `Blockchain` object off it, and finally sync the `Wallet` to the new `Blockchain`.\n\n```\nval newBlockchainConfig = BlockchainConfig.Electrum(ElectrumConfig(customElectrumURL, null, 5u, null, 10u))\nval newBlockchain = Blockchain(blockchainConfig)\nwallet.sync(newBlockchain)\n```\n\nAnd that's it! You are now connected to a new public electrum server, or you own custom run one. \n\nDo note, however, if the electrum server URL you have passed in is invalid (does not point to a server), the app might freeze. \nDo provide your own error handling either on the UI or the backend side.",
      "featuredImage": "https://images.pexels.com/photos/8369648/pexels-photo-8369648.jpeg",
      "publishedAt": "2022-06-28",
      "updatedAt": "2022-06-28",
      "category": "blockchain",
      "tags": ["BDK-Kotlin", "Bitcoin", "Electrum", "Privacy"],
      "readTime": 3,
      "views": 240,
      "featured": false,
      "status": "published",
      "seo": {
        "metaTitle": "Custom Electrum Servers with BDK-Kotlin - Tang Yetong",
        "metaDescription": "Learn how to configure custom electrum servers for enhanced privacy with BDK-Kotlin wallets.",
        "keywords": ["BDK-Kotlin", "Bitcoin", "Electrum", "Privacy", "Blockchain"]
      }
    },
    {
      "id": "9",
      "slug": "broadcasting-transaction-multiple-recipients-bdk-kotlin",
      "title": "Broadcasting transaction with multiple recipients using BDK-Kotlin",
      "excerpt": "A quick guide on how to use the BDK-Kotlin 0.7.0 library to create a send transaction with multiple recipients.",
      "content": "A quick guide on how to use the [`BDK-Kotlin 0.7.0`](https://github.com/bitcoindevkit/bdk-kotlin) library to create a send transaction with multiple recipients. \nYou can use the [`Padawan Wallet`](https://github.com/thunderbiscuit/padawan-wallet) and [`dev-kit`](https://github.com/thunderbiscuit/devkit-wallet/tree/simple-wallet) open-source projects as reference. \n\n## TxBuilder\n\nWith the `TxBuilder()` you can create the transaciton as per usual. \n\n```kotlin\nvar txBuilder = TxBuilder()\nfor (recipient in recipientList) {\n\ttxBuilder = txBuilder.addRecipient(address = recipient.first, amount = recipient.second)\n}\ntxBuilder = txBuilder.feeRate(satPerVbyte = feeRate)\nreturn txBuilder.finish(wallet)\n```\n\nYou can write this piece of logic however you want, but to give an example of using scopes to read the `recipientList` data :\n\n```kotlin \nval psbt = recipientList.fold(TxBuilder()) { builder, recipient ->\n    builder.addRecipient(recipient.address, recipient.amount)\n}.finish(wallet)\n```\n\n## Sign & Broadcast\n\nAfter you have the `PSBT` object you can do whatever you want with it! Sign and broadcast with the `Wallet` and `Blockchain` object to send out the transaction.",
      "featuredImage": "https://images.pexels.com/photos/8369648/pexels-photo-8369648.jpeg",
      "publishedAt": "2022-06-25",
      "updatedAt": "2022-06-25",
      "category": "blockchain",
      "tags": ["BDK-Kotlin", "Bitcoin", "Transactions", "Multiple Recipients"],
      "readTime": 4,
      "views": 310,
      "featured": false,
      "status": "published",
      "seo": {
        "metaTitle": "Multiple Recipients Bitcoin Transactions with BDK-Kotlin - Tang Yetong",
        "metaDescription": "Tutorial on creating Bitcoin transactions with multiple recipients using BDK-Kotlin library.",
        "keywords": ["BDK-Kotlin", "Bitcoin", "Transactions", "Multiple Recipients", "Blockchain"]
      }
    },
    {
      "id": "10",
      "slug": "creating-bitcoin-transactions-bdk-kotlin",
      "title": "Creating Bitcoin transactions using BDK-Kotlin",
      "excerpt": "A quick guide on how to use the BDK-Kotlin 0.7.0 library to create a simple 1 to 1 transaction.",
      "content": "A quick guide on how to use the BDK-Kotlin 0.7.0 library to create a simple 1 to 1 transaction, to transfer bitcoin (in our case testnet coins) from 1 person (you) to someone else. You can use the Padawan Wallet and dev-kit open-source projects as reference.\n\n## TxBuilder\n\nTo create transactions using `BDK-Kotlin` is really simple, with the `TxBuilder()` class being really intuitive to use. To create a 1 to 1 transaction you will just have to call `TxBuilder()` with all the necessary information for a transaction to be broadcasted. As an example this is a snippet of the code used in `Padawan Wallet` :\n\n```kotlin\nval psbt: PartiallySignedBitcoinTransaction = TxBuilder().addRecipient(recipient, amount).feeRate(satPerVbyte = fee_rate).finish(wallet)\n```\n\nThe variables required to build a valid transactions are `recipient`, `amount` and `feeRate`. We will quickly go through each one since they are simple to understand.\n\n`recipient: String` : This is the target address you want to send you `UTXO`s to. \n\n`amount: ULong` : This is the amount of `satoshi`s you want to send. \n\n`feeRate: Float` : This is the fees you want to spend to broadcast this transaction.\n\nFinally you will have to call `finish(wallet: BDKWallet)` with the `Wallet` object you have created already. This returns a `PartiallySignedBitcoinTransaction`\n\n## Signing a Transaction\n\n> A Partially Signed Bitcoin Transaction (PSBT) is a Bitcoin standard that facilitates portability of unsigned transactions, which allows multiple parties to easily sign the same transaction. \n> This is most useful when multiple parties wish to add inputs to the same transaction. PSBT was introduced by BIP 174, and allows users to more easily sign transactions on a cold storage device and then broadcast the signed transaction from a device connected to the internet.\n\nAn advantage of having the `PartiallySignedBitcoinTransaction` object instead of having the library do the signing and broadcasting is that you can do many things with it outside of 1 to 1 transactions, such as adding [`multi-sig`](https://101blockchains.com/multisignature-wallets/) functionality in your wallet app. \n\nTo continue where we left off, we will have to sign the transaction :\n\n```kotlin\nwallet.sign(psbt)\n```\n\nWith this the `PartiallySignedBitcoinTransaction` (`PSBT`) is signed, and ready to be broadcast!\n\n## Broadcasting a Transaction\n\n```kotlin\nblockchain.broadcast(signedPsbt)\nval psbtTxid = signedPsbt.txid()\n```\n\nCalling the `broadcast()` method on the blockchain object will broadcast the `PSBT`. This is return a `GenericError` if anything goes wrong with the transaction, i.e. not having enough funds in your account. You can retrieve the transaction id (`txid`) by calling `txid()` on the `PSBT` object. \n\nWith this you have created a 1 to 1 `PartiallySignedBitcoinTransaction`, signed and broadcasted it onto the blockchain for all to see!",
      "featuredImage": "https://images.pexels.com/photos/8369648/pexels-photo-8369648.jpeg",
      "publishedAt": "2022-06-25",
      "updatedAt": "2022-06-25",
      "category": "blockchain",
      "tags": ["BDK-Kotlin", "Bitcoin", "Transactions", "Tutorial"],
      "readTime": 5,
      "views": 380,
      "featured": false,
      "status": "published",
      "seo": {
        "metaTitle": "Creating Bitcoin Transactions with BDK-Kotlin - Tang Yetong",
        "metaDescription": "Complete guide to creating Bitcoin transactions using the BDK-Kotlin library for Android development.",
        "keywords": ["BDK-Kotlin", "Bitcoin", "Transactions", "Android", "Blockchain"]
      }
    },
    {
      "id": "11",
      "slug": "creating-testnet-wallet-bdk-kotlin",
      "title": "Creating a Testnet wallet using BDK-Kotlin",
      "excerpt": "A quick guide on how to use the BDK-Kotlin 0.7.0 library to create a Bitcoin testnet wallet for your own testing purposes.",
      "content": "A quick guide on how to use the [`BDK-Kotlin 0.7.0`](https://github.com/bitcoindevkit/bdk-kotlin) library to create a Bitcoin testnet wallet for your own testing purposes. \nYou can use the [`Padawan Wallet`](https://github.com/thunderbiscuit/padawan-wallet) and [`dev-kit`](https://github.com/thunderbiscuit/devkit-wallet/tree/simple-wallet) open-source projects as reference. \n\n## Wallet Creation\n\nTo create a wallet using `BDK-Kotlin` is really simple, with the `Wallet` class being really intuitive to use. To create a testnet wallet you will just have to call `Wallet()` with all the necessary information for a wallet to be created. As an example this is a snippet of the code used in `Padawan Wallet` :\n\n```kotlin\nval wallet: Wallet = Wallet(descriptor = descriptor, network = Network.TESTNET, databaseConfig = databaseConfig)\n```\n\nThe variables required to build a valid wallet are `descriptor`, `network` and `databaseConfig`. We will quickly go through each one since they are simple to understand.\n\n`descriptor: String` : This is the wallet descriptor that tells the wallet how to generate addresses. \n\n`network: Network` : This is the network you want to connect to. In our case we want `Network.TESTNET` for testing purposes. \n\n`databaseConfig: DatabaseConfig` : This is the database configuration for the wallet to store its data.\n\nFinally you will have to call `Wallet()` with all the necessary parameters. This returns a `Wallet` object.\n\n## Wallet Recovery\n\nTo recover a wallet using `BDK-Kotlin` is also really simple. You will just have to call `Wallet()` with the mnemonic phrase instead of the descriptor. As an example this is a snippet of the code used in `Padawan Wallet` :\n\n```kotlin\nval wallet: Wallet = Wallet(mnemonic = mnemonic, network = Network.TESTNET, databaseConfig = databaseConfig)\n```\n\nThe variables required to recover a wallet are `mnemonic`, `network` and `databaseConfig`. We will quickly go through each one since they are simple to understand.\n\n`mnemonic: String` : This is the mnemonic phrase that was used to create the wallet. \n\n`network: Network` : This is the network you want to connect to. In our case we want `Network.TESTNET` for testing purposes. \n\n`databaseConfig: DatabaseConfig` : This is the database configuration for the wallet to store its data.\n\nFinally you will have to call `Wallet()` with all the necessary parameters. This returns a `Wallet` object.\n\n## ExtendedKeyInfo\n\nTo get the `ExtendedKeyInfo` object from the wallet you will just have to call `getExtendedKeyInfo()` on the wallet object. As an example this is a snippet of the code used in `Padawan Wallet` :\n\n```kotlin\nval extendedKeyInfo: ExtendedKeyInfo = wallet.getExtendedKeyInfo()\n```\n\nThe `ExtendedKeyInfo` object contains all the information about the wallet, including the descriptor, network, and other metadata.\n\n## Descriptor\n\nTo get the descriptor from the `ExtendedKeyInfo` object you will just have to call `descriptor` on the `ExtendedKeyInfo` object. As an example this is a snippet of the code used in `Padawan Wallet` :\n\n```kotlin\nval descriptor: String = extendedKeyInfo.descriptor\n```\n\nThe descriptor is a string that tells the wallet how to generate addresses. It is used to create the wallet and can be used to recover the wallet.\n\n## Mnemonic\n\nTo get the mnemonic from the `ExtendedKeyInfo` object you will just have to call `mnemonic` on the `ExtendedKeyInfo` object. As an example this is a snippet of the code used in `Padawan Wallet` :\n\n```kotlin\nval mnemonic: String = extendedKeyInfo.mnemonic\n```\n\nThe mnemonic is a string that is used to recover the wallet. It is generated when the wallet is created and can be used to recover the wallet.\n\n## Summary\n\nTo create a testnet wallet using `BDK-Kotlin` you will just have to call `Wallet()` with the descriptor, network, and database configuration. To recover a wallet you will just have to call `Wallet()` with the mnemonic phrase, network, and database configuration. The `ExtendedKeyInfo` object contains all the information about the wallet, including the descriptor and mnemonic.\n\nRemember that to recover a wallet you just need the [descriptor](https://bitcoindevkit.org/descriptors/) to let the scripts know how to generate the addresses, hence after retrieving the `ExtendedKeyInfo` object it is easy to see that the rest of the code remains the same.",
      "featuredImage": "https://images.pexels.com/photos/8369648/pexels-photo-8369648.jpeg",
      "publishedAt": "2022-06-25",
      "updatedAt": "2022-06-25",
      "category": "blockchain",
      "tags": ["BDK-Kotlin", "Bitcoin", "Testnet", "Wallet Creation"],
      "readTime": 6,
      "views": 450,
      "featured": false,
      "status": "published",
      "seo": {
        "metaTitle": "Creating Bitcoin Testnet Wallet with BDK-Kotlin - Tang Yetong",
        "metaDescription": "Complete tutorial on creating a Bitcoin testnet wallet using BDK-Kotlin library for Android development.",
        "keywords": ["BDK-Kotlin", "Bitcoin", "Testnet", "Wallet", "Android", "Blockchain"]
      }
    }
  ],
  "categories": [
    {
      "id": "1",
      "name": "Blockchain",
      "slug": "blockchain",
      "description": "Bitcoin development, cryptocurrency, and blockchain technology",
      "color": "text-yellow-500",
      "postCount": 7
    },
    {
      "id": "2",
      "name": "Mobile Development",
      "slug": "mobile",
      "description": "React Native, Android, and mobile app development",
      "color": "text-green-500",
      "postCount": 1
    },
    {
      "id": "3",
      "name": "Career",
      "slug": "career",
      "description": "Internships, professional experiences, and career insights",
      "color": "text-blue-500",
      "postCount": 1
    },
    {
      "id": "4",
      "name": "Academic",
      "slug": "academic",
      "description": "University projects and academic work",
      "color": "text-purple-500",
      "postCount": 1
    }
  ]
} 